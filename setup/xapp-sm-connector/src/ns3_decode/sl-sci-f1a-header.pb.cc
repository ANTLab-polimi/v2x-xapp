// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl-sci-f1a-header.proto

#include "sl-sci-f1a-header.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace ns3 {
class NrSlSciF1aHeaderProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NrSlSciF1aHeaderProto>
      _instance;
} _NrSlSciF1aHeaderProto_default_instance_;
}  // namespace ns3
namespace protobuf_sl_2dsci_2df1a_2dheader_2eproto {
static void InitDefaultsNrSlSciF1aHeaderProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ns3::_NrSlSciF1aHeaderProto_default_instance_;
    new (ptr) ::ns3::NrSlSciF1aHeaderProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ns3::NrSlSciF1aHeaderProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NrSlSciF1aHeaderProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNrSlSciF1aHeaderProto}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_NrSlSciF1aHeaderProto.base);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ns3::NrSlSciF1aHeaderProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ns3::NrSlSciF1aHeaderProto, m_totalsubchannels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ns3::NrSlSciF1aHeaderProto, m_priority_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ns3::NrSlSciF1aHeaderProto, m_indexstartsubchannel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ns3::NrSlSciF1aHeaderProto, m_lengthsubchannel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ns3::NrSlSciF1aHeaderProto, m_mcs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ns3::NrSlSciF1aHeaderProto, m_slresourcereserveperiod_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ns3::NrSlSciF1aHeaderProto, m_slmaxnumperreserve_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ns3::NrSlSciF1aHeaderProto, m_slscistage2format_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ns3::NrSlSciF1aHeaderProto, m_indexstartsbchretx1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ns3::NrSlSciF1aHeaderProto, m_indexstartsbchretx2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ns3::NrSlSciF1aHeaderProto, m_gapretx1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ns3::NrSlSciF1aHeaderProto, m_gapretx2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ns3::NrSlSciF1aHeaderProto, sciformat_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ns3::NrSlSciF1aHeaderProto)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ns3::_NrSlSciF1aHeaderProto_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "sl-sci-f1a-header.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\027sl-sci-f1a-header.proto\022\003ns3\"\334\003\n\025NrSlS"
      "ciF1aHeaderProto\022\032\n\022m_totalSubChannels\030\001"
      " \001(\r\022\022\n\nm_priority\030\002 \001(\r\022\036\n\026m_indexStart"
      "SubChannel\030\003 \001(\r\022\032\n\022m_lengthSubChannel\030\004"
      " \001(\r\022\r\n\005m_mcs\030\005 \001(\r\022!\n\031m_slResourceReser"
      "vePeriod\030\006 \001(\r\022\034\n\024m_slMaxNumPerReserve\030\007"
      " \001(\r\022\033\n\023m_slSciStage2Format\030\010 \001(\r\022\035\n\025m_i"
      "ndexStartSbChReTx1\030\t \001(\r\022\035\n\025m_indexStart"
      "SbChReTx2\030\n \001(\r\022\022\n\nm_gapReTx1\030\013 \001(\r\022\022\n\nm"
      "_gapReTx2\030\014 \001(\r\022H\n\tsciFormat\030\r \003(\01621.ns3"
      ".NrSlSciF1aHeaderProto.SciStage2Format_t"
      "ProtoB\002\020\001\":\n\026SciStage2Format_tProto\022\017\n\013S"
      "ciFormat2A\020\000\022\017\n\013SciFormat2B\020\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 517);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sl-sci-f1a-header.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_sl_2dsci_2df1a_2dheader_2eproto
namespace ns3 {
const ::google::protobuf::EnumDescriptor* NrSlSciF1aHeaderProto_SciStage2Format_tProto_descriptor() {
  protobuf_sl_2dsci_2df1a_2dheader_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sl_2dsci_2df1a_2dheader_2eproto::file_level_enum_descriptors[0];
}
bool NrSlSciF1aHeaderProto_SciStage2Format_tProto_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NrSlSciF1aHeaderProto_SciStage2Format_tProto NrSlSciF1aHeaderProto::SciFormat2A;
const NrSlSciF1aHeaderProto_SciStage2Format_tProto NrSlSciF1aHeaderProto::SciFormat2B;
const NrSlSciF1aHeaderProto_SciStage2Format_tProto NrSlSciF1aHeaderProto::SciStage2Format_tProto_MIN;
const NrSlSciF1aHeaderProto_SciStage2Format_tProto NrSlSciF1aHeaderProto::SciStage2Format_tProto_MAX;
const int NrSlSciF1aHeaderProto::SciStage2Format_tProto_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void NrSlSciF1aHeaderProto::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NrSlSciF1aHeaderProto::kMTotalSubChannelsFieldNumber;
const int NrSlSciF1aHeaderProto::kMPriorityFieldNumber;
const int NrSlSciF1aHeaderProto::kMIndexStartSubChannelFieldNumber;
const int NrSlSciF1aHeaderProto::kMLengthSubChannelFieldNumber;
const int NrSlSciF1aHeaderProto::kMMcsFieldNumber;
const int NrSlSciF1aHeaderProto::kMSlResourceReservePeriodFieldNumber;
const int NrSlSciF1aHeaderProto::kMSlMaxNumPerReserveFieldNumber;
const int NrSlSciF1aHeaderProto::kMSlSciStage2FormatFieldNumber;
const int NrSlSciF1aHeaderProto::kMIndexStartSbChReTx1FieldNumber;
const int NrSlSciF1aHeaderProto::kMIndexStartSbChReTx2FieldNumber;
const int NrSlSciF1aHeaderProto::kMGapReTx1FieldNumber;
const int NrSlSciF1aHeaderProto::kMGapReTx2FieldNumber;
const int NrSlSciF1aHeaderProto::kSciFormatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NrSlSciF1aHeaderProto::NrSlSciF1aHeaderProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sl_2dsci_2df1a_2dheader_2eproto::scc_info_NrSlSciF1aHeaderProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ns3.NrSlSciF1aHeaderProto)
}
NrSlSciF1aHeaderProto::NrSlSciF1aHeaderProto(const NrSlSciF1aHeaderProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sciformat_(from.sciformat_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&m_totalsubchannels_, &from.m_totalsubchannels_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_gapretx2_) -
    reinterpret_cast<char*>(&m_totalsubchannels_)) + sizeof(m_gapretx2_));
  // @@protoc_insertion_point(copy_constructor:ns3.NrSlSciF1aHeaderProto)
}

void NrSlSciF1aHeaderProto::SharedCtor() {
  ::memset(&m_totalsubchannels_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_gapretx2_) -
      reinterpret_cast<char*>(&m_totalsubchannels_)) + sizeof(m_gapretx2_));
}

NrSlSciF1aHeaderProto::~NrSlSciF1aHeaderProto() {
  // @@protoc_insertion_point(destructor:ns3.NrSlSciF1aHeaderProto)
  SharedDtor();
}

void NrSlSciF1aHeaderProto::SharedDtor() {
}

void NrSlSciF1aHeaderProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NrSlSciF1aHeaderProto::descriptor() {
  ::protobuf_sl_2dsci_2df1a_2dheader_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sl_2dsci_2df1a_2dheader_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NrSlSciF1aHeaderProto& NrSlSciF1aHeaderProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sl_2dsci_2df1a_2dheader_2eproto::scc_info_NrSlSciF1aHeaderProto.base);
  return *internal_default_instance();
}


void NrSlSciF1aHeaderProto::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3.NrSlSciF1aHeaderProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sciformat_.Clear();
  ::memset(&m_totalsubchannels_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_gapretx2_) -
      reinterpret_cast<char*>(&m_totalsubchannels_)) + sizeof(m_gapretx2_));
  _internal_metadata_.Clear();
}

bool NrSlSciF1aHeaderProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ns3.NrSlSciF1aHeaderProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 m_totalSubChannels = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_totalsubchannels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 m_priority = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 m_indexStartSubChannel = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_indexstartsubchannel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 m_lengthSubChannel = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_lengthsubchannel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 m_mcs = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_mcs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 m_slResourceReservePeriod = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_slresourcereserveperiod_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 m_slMaxNumPerReserve = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_slmaxnumperreserve_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 m_slSciStage2Format = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_slscistage2format_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 m_indexStartSbChReTx1 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_indexstartsbchretx1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 m_indexStartSbChReTx2 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_indexstartsbchretx2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 m_gapReTx1 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_gapretx1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 m_gapReTx2 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_gapretx2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ns3.NrSlSciF1aHeaderProto.SciStage2Format_tProto sciFormat = 13 [packed = true];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_sciformat(static_cast< ::ns3::NrSlSciF1aHeaderProto_SciStage2Format_tProto >(value));
          }
          input->PopLimit(limit);
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_sciformat(static_cast< ::ns3::NrSlSciF1aHeaderProto_SciStage2Format_tProto >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ns3.NrSlSciF1aHeaderProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ns3.NrSlSciF1aHeaderProto)
  return false;
#undef DO_
}

void NrSlSciF1aHeaderProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ns3.NrSlSciF1aHeaderProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 m_totalSubChannels = 1;
  if (this->m_totalsubchannels() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->m_totalsubchannels(), output);
  }

  // uint32 m_priority = 2;
  if (this->m_priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->m_priority(), output);
  }

  // uint32 m_indexStartSubChannel = 3;
  if (this->m_indexstartsubchannel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->m_indexstartsubchannel(), output);
  }

  // uint32 m_lengthSubChannel = 4;
  if (this->m_lengthsubchannel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->m_lengthsubchannel(), output);
  }

  // uint32 m_mcs = 5;
  if (this->m_mcs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->m_mcs(), output);
  }

  // uint32 m_slResourceReservePeriod = 6;
  if (this->m_slresourcereserveperiod() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->m_slresourcereserveperiod(), output);
  }

  // uint32 m_slMaxNumPerReserve = 7;
  if (this->m_slmaxnumperreserve() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->m_slmaxnumperreserve(), output);
  }

  // uint32 m_slSciStage2Format = 8;
  if (this->m_slscistage2format() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->m_slscistage2format(), output);
  }

  // uint32 m_indexStartSbChReTx1 = 9;
  if (this->m_indexstartsbchretx1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->m_indexstartsbchretx1(), output);
  }

  // uint32 m_indexStartSbChReTx2 = 10;
  if (this->m_indexstartsbchretx2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->m_indexstartsbchretx2(), output);
  }

  // uint32 m_gapReTx1 = 11;
  if (this->m_gapretx1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->m_gapretx1(), output);
  }

  // uint32 m_gapReTx2 = 12;
  if (this->m_gapretx2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->m_gapretx2(), output);
  }

  // repeated .ns3.NrSlSciF1aHeaderProto.SciStage2Format_tProto sciFormat = 13 [packed = true];
  if (this->sciformat_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      13,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(
        static_cast< ::google::protobuf::uint32>(_sciformat_cached_byte_size_));
  }
  for (int i = 0, n = this->sciformat_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->sciformat(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ns3.NrSlSciF1aHeaderProto)
}

::google::protobuf::uint8* NrSlSciF1aHeaderProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ns3.NrSlSciF1aHeaderProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 m_totalSubChannels = 1;
  if (this->m_totalsubchannels() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->m_totalsubchannels(), target);
  }

  // uint32 m_priority = 2;
  if (this->m_priority() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->m_priority(), target);
  }

  // uint32 m_indexStartSubChannel = 3;
  if (this->m_indexstartsubchannel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->m_indexstartsubchannel(), target);
  }

  // uint32 m_lengthSubChannel = 4;
  if (this->m_lengthsubchannel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->m_lengthsubchannel(), target);
  }

  // uint32 m_mcs = 5;
  if (this->m_mcs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->m_mcs(), target);
  }

  // uint32 m_slResourceReservePeriod = 6;
  if (this->m_slresourcereserveperiod() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->m_slresourcereserveperiod(), target);
  }

  // uint32 m_slMaxNumPerReserve = 7;
  if (this->m_slmaxnumperreserve() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->m_slmaxnumperreserve(), target);
  }

  // uint32 m_slSciStage2Format = 8;
  if (this->m_slscistage2format() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->m_slscistage2format(), target);
  }

  // uint32 m_indexStartSbChReTx1 = 9;
  if (this->m_indexstartsbchretx1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->m_indexstartsbchretx1(), target);
  }

  // uint32 m_indexStartSbChReTx2 = 10;
  if (this->m_indexstartsbchretx2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->m_indexstartsbchretx2(), target);
  }

  // uint32 m_gapReTx1 = 11;
  if (this->m_gapretx1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->m_gapretx1(), target);
  }

  // uint32 m_gapReTx2 = 12;
  if (this->m_gapretx2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->m_gapretx2(), target);
  }

  // repeated .ns3.NrSlSciF1aHeaderProto.SciStage2Format_tProto sciFormat = 13 [packed = true];
  if (this->sciformat_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      13,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      static_cast< ::google::protobuf::uint32>(
            _sciformat_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->sciformat_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3.NrSlSciF1aHeaderProto)
  return target;
}

size_t NrSlSciF1aHeaderProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3.NrSlSciF1aHeaderProto)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .ns3.NrSlSciF1aHeaderProto.SciStage2Format_tProto sciFormat = 13 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->sciformat_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->sciformat(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _sciformat_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 m_totalSubChannels = 1;
  if (this->m_totalsubchannels() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->m_totalsubchannels());
  }

  // uint32 m_priority = 2;
  if (this->m_priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->m_priority());
  }

  // uint32 m_indexStartSubChannel = 3;
  if (this->m_indexstartsubchannel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->m_indexstartsubchannel());
  }

  // uint32 m_lengthSubChannel = 4;
  if (this->m_lengthsubchannel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->m_lengthsubchannel());
  }

  // uint32 m_mcs = 5;
  if (this->m_mcs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->m_mcs());
  }

  // uint32 m_slResourceReservePeriod = 6;
  if (this->m_slresourcereserveperiod() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->m_slresourcereserveperiod());
  }

  // uint32 m_slMaxNumPerReserve = 7;
  if (this->m_slmaxnumperreserve() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->m_slmaxnumperreserve());
  }

  // uint32 m_slSciStage2Format = 8;
  if (this->m_slscistage2format() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->m_slscistage2format());
  }

  // uint32 m_indexStartSbChReTx1 = 9;
  if (this->m_indexstartsbchretx1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->m_indexstartsbchretx1());
  }

  // uint32 m_indexStartSbChReTx2 = 10;
  if (this->m_indexstartsbchretx2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->m_indexstartsbchretx2());
  }

  // uint32 m_gapReTx1 = 11;
  if (this->m_gapretx1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->m_gapretx1());
  }

  // uint32 m_gapReTx2 = 12;
  if (this->m_gapretx2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->m_gapretx2());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NrSlSciF1aHeaderProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ns3.NrSlSciF1aHeaderProto)
  GOOGLE_DCHECK_NE(&from, this);
  const NrSlSciF1aHeaderProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NrSlSciF1aHeaderProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ns3.NrSlSciF1aHeaderProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ns3.NrSlSciF1aHeaderProto)
    MergeFrom(*source);
  }
}

void NrSlSciF1aHeaderProto::MergeFrom(const NrSlSciF1aHeaderProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3.NrSlSciF1aHeaderProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sciformat_.MergeFrom(from.sciformat_);
  if (from.m_totalsubchannels() != 0) {
    set_m_totalsubchannels(from.m_totalsubchannels());
  }
  if (from.m_priority() != 0) {
    set_m_priority(from.m_priority());
  }
  if (from.m_indexstartsubchannel() != 0) {
    set_m_indexstartsubchannel(from.m_indexstartsubchannel());
  }
  if (from.m_lengthsubchannel() != 0) {
    set_m_lengthsubchannel(from.m_lengthsubchannel());
  }
  if (from.m_mcs() != 0) {
    set_m_mcs(from.m_mcs());
  }
  if (from.m_slresourcereserveperiod() != 0) {
    set_m_slresourcereserveperiod(from.m_slresourcereserveperiod());
  }
  if (from.m_slmaxnumperreserve() != 0) {
    set_m_slmaxnumperreserve(from.m_slmaxnumperreserve());
  }
  if (from.m_slscistage2format() != 0) {
    set_m_slscistage2format(from.m_slscistage2format());
  }
  if (from.m_indexstartsbchretx1() != 0) {
    set_m_indexstartsbchretx1(from.m_indexstartsbchretx1());
  }
  if (from.m_indexstartsbchretx2() != 0) {
    set_m_indexstartsbchretx2(from.m_indexstartsbchretx2());
  }
  if (from.m_gapretx1() != 0) {
    set_m_gapretx1(from.m_gapretx1());
  }
  if (from.m_gapretx2() != 0) {
    set_m_gapretx2(from.m_gapretx2());
  }
}

void NrSlSciF1aHeaderProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ns3.NrSlSciF1aHeaderProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NrSlSciF1aHeaderProto::CopyFrom(const NrSlSciF1aHeaderProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3.NrSlSciF1aHeaderProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NrSlSciF1aHeaderProto::IsInitialized() const {
  return true;
}

void NrSlSciF1aHeaderProto::Swap(NrSlSciF1aHeaderProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NrSlSciF1aHeaderProto::InternalSwap(NrSlSciF1aHeaderProto* other) {
  using std::swap;
  sciformat_.InternalSwap(&other->sciformat_);
  swap(m_totalsubchannels_, other->m_totalsubchannels_);
  swap(m_priority_, other->m_priority_);
  swap(m_indexstartsubchannel_, other->m_indexstartsubchannel_);
  swap(m_lengthsubchannel_, other->m_lengthsubchannel_);
  swap(m_mcs_, other->m_mcs_);
  swap(m_slresourcereserveperiod_, other->m_slresourcereserveperiod_);
  swap(m_slmaxnumperreserve_, other->m_slmaxnumperreserve_);
  swap(m_slscistage2format_, other->m_slscistage2format_);
  swap(m_indexstartsbchretx1_, other->m_indexstartsbchretx1_);
  swap(m_indexstartsbchretx2_, other->m_indexstartsbchretx2_);
  swap(m_gapretx1_, other->m_gapretx1_);
  swap(m_gapretx2_, other->m_gapretx2_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NrSlSciF1aHeaderProto::GetMetadata() const {
  protobuf_sl_2dsci_2df1a_2dheader_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sl_2dsci_2df1a_2dheader_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ns3
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ns3::NrSlSciF1aHeaderProto* Arena::CreateMaybeMessage< ::ns3::NrSlSciF1aHeaderProto >(Arena* arena) {
  return Arena::CreateInternal< ::ns3::NrSlSciF1aHeaderProto >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
