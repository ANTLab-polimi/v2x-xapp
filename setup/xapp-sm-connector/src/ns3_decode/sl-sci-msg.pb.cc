// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl-sci-msg.proto

#include "sl-sci-msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_sl_2dsci_2dmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NrSlMacPduTagProto_SfnSfProto_sl_2dsci_2dmsg_2eproto;
namespace ns3 {
class NrSlMacPduTagProto_SfnSfProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NrSlMacPduTagProto_SfnSfProto> _instance;
} _NrSlMacPduTagProto_SfnSfProto_default_instance_;
class NrSlMacPduTagProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NrSlMacPduTagProto> _instance;
} _NrSlMacPduTagProto_default_instance_;
class NrSlSciF1aHeaderProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NrSlSciF1aHeaderProto> _instance;
} _NrSlSciF1aHeaderProto_default_instance_;
}  // namespace ns3
static void InitDefaultsscc_info_NrSlMacPduTagProto_sl_2dsci_2dmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ns3::_NrSlMacPduTagProto_default_instance_;
    new (ptr) ::ns3::NrSlMacPduTagProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ns3::NrSlMacPduTagProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NrSlMacPduTagProto_sl_2dsci_2dmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NrSlMacPduTagProto_sl_2dsci_2dmsg_2eproto}, {
      &scc_info_NrSlMacPduTagProto_SfnSfProto_sl_2dsci_2dmsg_2eproto.base,}};

static void InitDefaultsscc_info_NrSlMacPduTagProto_SfnSfProto_sl_2dsci_2dmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ns3::_NrSlMacPduTagProto_SfnSfProto_default_instance_;
    new (ptr) ::ns3::NrSlMacPduTagProto_SfnSfProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ns3::NrSlMacPduTagProto_SfnSfProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NrSlMacPduTagProto_SfnSfProto_sl_2dsci_2dmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NrSlMacPduTagProto_SfnSfProto_sl_2dsci_2dmsg_2eproto}, {}};

static void InitDefaultsscc_info_NrSlSciF1aHeaderProto_sl_2dsci_2dmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ns3::_NrSlSciF1aHeaderProto_default_instance_;
    new (ptr) ::ns3::NrSlSciF1aHeaderProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ns3::NrSlSciF1aHeaderProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NrSlSciF1aHeaderProto_sl_2dsci_2dmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NrSlSciF1aHeaderProto_sl_2dsci_2dmsg_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sl_2dsci_2dmsg_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_sl_2dsci_2dmsg_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sl_2dsci_2dmsg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_sl_2dsci_2dmsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns3::NrSlMacPduTagProto_SfnSfProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ns3::NrSlMacPduTagProto_SfnSfProto, m_framenum_),
  PROTOBUF_FIELD_OFFSET(::ns3::NrSlMacPduTagProto_SfnSfProto, m_subframenum_),
  PROTOBUF_FIELD_OFFSET(::ns3::NrSlMacPduTagProto_SfnSfProto, m_slotnum_),
  PROTOBUF_FIELD_OFFSET(::ns3::NrSlMacPduTagProto_SfnSfProto, m_numerology_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns3::NrSlMacPduTagProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ns3::NrSlMacPduTagProto, m_rnti_),
  PROTOBUF_FIELD_OFFSET(::ns3::NrSlMacPduTagProto, m_symstart_),
  PROTOBUF_FIELD_OFFSET(::ns3::NrSlMacPduTagProto, m_numsym_),
  PROTOBUF_FIELD_OFFSET(::ns3::NrSlMacPduTagProto, m_tbsize_),
  PROTOBUF_FIELD_OFFSET(::ns3::NrSlMacPduTagProto, m_dstl2id_),
  PROTOBUF_FIELD_OFFSET(::ns3::NrSlMacPduTagProto, m_sfnsf_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns3::NrSlSciF1aHeaderProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ns3::NrSlSciF1aHeaderProto, m_totalsubchannels_),
  PROTOBUF_FIELD_OFFSET(::ns3::NrSlSciF1aHeaderProto, m_priority_),
  PROTOBUF_FIELD_OFFSET(::ns3::NrSlSciF1aHeaderProto, m_indexstartsubchannel_),
  PROTOBUF_FIELD_OFFSET(::ns3::NrSlSciF1aHeaderProto, m_lengthsubchannel_),
  PROTOBUF_FIELD_OFFSET(::ns3::NrSlSciF1aHeaderProto, m_mcs_),
  PROTOBUF_FIELD_OFFSET(::ns3::NrSlSciF1aHeaderProto, m_slresourcereserveperiod_),
  PROTOBUF_FIELD_OFFSET(::ns3::NrSlSciF1aHeaderProto, m_slmaxnumperreserve_),
  PROTOBUF_FIELD_OFFSET(::ns3::NrSlSciF1aHeaderProto, m_slscistage2format_),
  PROTOBUF_FIELD_OFFSET(::ns3::NrSlSciF1aHeaderProto, m_indexstartsbchretx1_),
  PROTOBUF_FIELD_OFFSET(::ns3::NrSlSciF1aHeaderProto, m_indexstartsbchretx2_),
  PROTOBUF_FIELD_OFFSET(::ns3::NrSlSciF1aHeaderProto, m_gapretx1_),
  PROTOBUF_FIELD_OFFSET(::ns3::NrSlSciF1aHeaderProto, m_gapretx2_),
  PROTOBUF_FIELD_OFFSET(::ns3::NrSlSciF1aHeaderProto, sciformat_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ns3::NrSlMacPduTagProto_SfnSfProto)},
  { 9, -1, sizeof(::ns3::NrSlMacPduTagProto)},
  { 20, -1, sizeof(::ns3::NrSlSciF1aHeaderProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ns3::_NrSlMacPduTagProto_SfnSfProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ns3::_NrSlMacPduTagProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ns3::_NrSlSciF1aHeaderProto_default_instance_),
};

const char descriptor_table_protodef_sl_2dsci_2dmsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020sl-sci-msg.proto\022\003ns3\"\206\002\n\022NrSlMacPduTa"
  "gProto\022\016\n\006m_rnti\030\001 \001(\r\022\022\n\nm_symStart\030\002 \001"
  "(\r\022\020\n\010m_numSym\030\003 \001(\r\022\020\n\010m_tbSize\030\004 \001(\r\022\021"
  "\n\tm_dstL2Id\030\005 \001(\r\0223\n\007m_sfnSf\030\006 \001(\0132\".ns3"
  ".NrSlMacPduTagProto.SfnSfProto\032`\n\nSfnSfP"
  "roto\022\022\n\nm_frameNum\030\001 \001(\r\022\025\n\rm_subframeNu"
  "m\030\002 \001(\r\022\021\n\tm_slotNum\030\003 \001(\r\022\024\n\014m_numerolo"
  "gy\030\004 \001(\r\"\334\003\n\025NrSlSciF1aHeaderProto\022\032\n\022m_"
  "totalSubChannels\030\001 \001(\r\022\022\n\nm_priority\030\002 \001"
  "(\r\022\036\n\026m_indexStartSubChannel\030\003 \001(\r\022\032\n\022m_"
  "lengthSubChannel\030\004 \001(\r\022\r\n\005m_mcs\030\005 \001(\r\022!\n"
  "\031m_slResourceReservePeriod\030\006 \001(\r\022\034\n\024m_sl"
  "MaxNumPerReserve\030\007 \001(\r\022\033\n\023m_slSciStage2F"
  "ormat\030\010 \001(\r\022\035\n\025m_indexStartSbChReTx1\030\t \001"
  "(\r\022\035\n\025m_indexStartSbChReTx2\030\n \001(\r\022\022\n\nm_g"
  "apReTx1\030\013 \001(\r\022\022\n\nm_gapReTx2\030\014 \001(\r\022H\n\tsci"
  "Format\030\r \003(\01621.ns3.NrSlSciF1aHeaderProto"
  ".SciStage2Format_tProtoB\002\020\001\":\n\026SciStage2"
  "Format_tProto\022\017\n\013SciFormat2A\020\000\022\017\n\013SciFor"
  "mat2B\020\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sl_2dsci_2dmsg_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_sl_2dsci_2dmsg_2eproto_sccs[3] = {
  &scc_info_NrSlMacPduTagProto_sl_2dsci_2dmsg_2eproto.base,
  &scc_info_NrSlMacPduTagProto_SfnSfProto_sl_2dsci_2dmsg_2eproto.base,
  &scc_info_NrSlSciF1aHeaderProto_sl_2dsci_2dmsg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sl_2dsci_2dmsg_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sl_2dsci_2dmsg_2eproto = {
  false, false, descriptor_table_protodef_sl_2dsci_2dmsg_2eproto, "sl-sci-msg.proto", 775,
  &descriptor_table_sl_2dsci_2dmsg_2eproto_once, descriptor_table_sl_2dsci_2dmsg_2eproto_sccs, descriptor_table_sl_2dsci_2dmsg_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_sl_2dsci_2dmsg_2eproto::offsets,
  file_level_metadata_sl_2dsci_2dmsg_2eproto, 3, file_level_enum_descriptors_sl_2dsci_2dmsg_2eproto, file_level_service_descriptors_sl_2dsci_2dmsg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_sl_2dsci_2dmsg_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_sl_2dsci_2dmsg_2eproto)), true);
namespace ns3 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NrSlSciF1aHeaderProto_SciStage2Format_tProto_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_2dsci_2dmsg_2eproto);
  return file_level_enum_descriptors_sl_2dsci_2dmsg_2eproto[0];
}
bool NrSlSciF1aHeaderProto_SciStage2Format_tProto_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr NrSlSciF1aHeaderProto_SciStage2Format_tProto NrSlSciF1aHeaderProto::SciFormat2A;
constexpr NrSlSciF1aHeaderProto_SciStage2Format_tProto NrSlSciF1aHeaderProto::SciFormat2B;
constexpr NrSlSciF1aHeaderProto_SciStage2Format_tProto NrSlSciF1aHeaderProto::SciStage2Format_tProto_MIN;
constexpr NrSlSciF1aHeaderProto_SciStage2Format_tProto NrSlSciF1aHeaderProto::SciStage2Format_tProto_MAX;
constexpr int NrSlSciF1aHeaderProto::SciStage2Format_tProto_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void NrSlMacPduTagProto_SfnSfProto::InitAsDefaultInstance() {
}
class NrSlMacPduTagProto_SfnSfProto::_Internal {
 public:
};

NrSlMacPduTagProto_SfnSfProto::NrSlMacPduTagProto_SfnSfProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ns3.NrSlMacPduTagProto.SfnSfProto)
}
NrSlMacPduTagProto_SfnSfProto::NrSlMacPduTagProto_SfnSfProto(const NrSlMacPduTagProto_SfnSfProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&m_framenum_, &from.m_framenum_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_numerology_) -
    reinterpret_cast<char*>(&m_framenum_)) + sizeof(m_numerology_));
  // @@protoc_insertion_point(copy_constructor:ns3.NrSlMacPduTagProto.SfnSfProto)
}

void NrSlMacPduTagProto_SfnSfProto::SharedCtor() {
  ::memset(&m_framenum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_numerology_) -
      reinterpret_cast<char*>(&m_framenum_)) + sizeof(m_numerology_));
}

NrSlMacPduTagProto_SfnSfProto::~NrSlMacPduTagProto_SfnSfProto() {
  // @@protoc_insertion_point(destructor:ns3.NrSlMacPduTagProto.SfnSfProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NrSlMacPduTagProto_SfnSfProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NrSlMacPduTagProto_SfnSfProto::ArenaDtor(void* object) {
  NrSlMacPduTagProto_SfnSfProto* _this = reinterpret_cast< NrSlMacPduTagProto_SfnSfProto* >(object);
  (void)_this;
}
void NrSlMacPduTagProto_SfnSfProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NrSlMacPduTagProto_SfnSfProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NrSlMacPduTagProto_SfnSfProto& NrSlMacPduTagProto_SfnSfProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NrSlMacPduTagProto_SfnSfProto_sl_2dsci_2dmsg_2eproto.base);
  return *internal_default_instance();
}


void NrSlMacPduTagProto_SfnSfProto::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3.NrSlMacPduTagProto.SfnSfProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&m_framenum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_numerology_) -
      reinterpret_cast<char*>(&m_framenum_)) + sizeof(m_numerology_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NrSlMacPduTagProto_SfnSfProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 m_frameNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          m_framenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 m_subframeNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          m_subframenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 m_slotNum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          m_slotnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 m_numerology = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          m_numerology_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NrSlMacPduTagProto_SfnSfProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3.NrSlMacPduTagProto.SfnSfProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 m_frameNum = 1;
  if (this->m_framenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_m_framenum(), target);
  }

  // uint32 m_subframeNum = 2;
  if (this->m_subframenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_m_subframenum(), target);
  }

  // uint32 m_slotNum = 3;
  if (this->m_slotnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_m_slotnum(), target);
  }

  // uint32 m_numerology = 4;
  if (this->m_numerology() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_m_numerology(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3.NrSlMacPduTagProto.SfnSfProto)
  return target;
}

size_t NrSlMacPduTagProto_SfnSfProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3.NrSlMacPduTagProto.SfnSfProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 m_frameNum = 1;
  if (this->m_framenum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_m_framenum());
  }

  // uint32 m_subframeNum = 2;
  if (this->m_subframenum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_m_subframenum());
  }

  // uint32 m_slotNum = 3;
  if (this->m_slotnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_m_slotnum());
  }

  // uint32 m_numerology = 4;
  if (this->m_numerology() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_m_numerology());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NrSlMacPduTagProto_SfnSfProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ns3.NrSlMacPduTagProto.SfnSfProto)
  GOOGLE_DCHECK_NE(&from, this);
  const NrSlMacPduTagProto_SfnSfProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NrSlMacPduTagProto_SfnSfProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ns3.NrSlMacPduTagProto.SfnSfProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ns3.NrSlMacPduTagProto.SfnSfProto)
    MergeFrom(*source);
  }
}

void NrSlMacPduTagProto_SfnSfProto::MergeFrom(const NrSlMacPduTagProto_SfnSfProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3.NrSlMacPduTagProto.SfnSfProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.m_framenum() != 0) {
    _internal_set_m_framenum(from._internal_m_framenum());
  }
  if (from.m_subframenum() != 0) {
    _internal_set_m_subframenum(from._internal_m_subframenum());
  }
  if (from.m_slotnum() != 0) {
    _internal_set_m_slotnum(from._internal_m_slotnum());
  }
  if (from.m_numerology() != 0) {
    _internal_set_m_numerology(from._internal_m_numerology());
  }
}

void NrSlMacPduTagProto_SfnSfProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ns3.NrSlMacPduTagProto.SfnSfProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NrSlMacPduTagProto_SfnSfProto::CopyFrom(const NrSlMacPduTagProto_SfnSfProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3.NrSlMacPduTagProto.SfnSfProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NrSlMacPduTagProto_SfnSfProto::IsInitialized() const {
  return true;
}

void NrSlMacPduTagProto_SfnSfProto::InternalSwap(NrSlMacPduTagProto_SfnSfProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NrSlMacPduTagProto_SfnSfProto, m_numerology_)
      + sizeof(NrSlMacPduTagProto_SfnSfProto::m_numerology_)
      - PROTOBUF_FIELD_OFFSET(NrSlMacPduTagProto_SfnSfProto, m_framenum_)>(
          reinterpret_cast<char*>(&m_framenum_),
          reinterpret_cast<char*>(&other->m_framenum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NrSlMacPduTagProto_SfnSfProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NrSlMacPduTagProto::InitAsDefaultInstance() {
  ::ns3::_NrSlMacPduTagProto_default_instance_._instance.get_mutable()->m_sfnsf_ = const_cast< ::ns3::NrSlMacPduTagProto_SfnSfProto*>(
      ::ns3::NrSlMacPduTagProto_SfnSfProto::internal_default_instance());
}
class NrSlMacPduTagProto::_Internal {
 public:
  static const ::ns3::NrSlMacPduTagProto_SfnSfProto& m_sfnsf(const NrSlMacPduTagProto* msg);
};

const ::ns3::NrSlMacPduTagProto_SfnSfProto&
NrSlMacPduTagProto::_Internal::m_sfnsf(const NrSlMacPduTagProto* msg) {
  return *msg->m_sfnsf_;
}
NrSlMacPduTagProto::NrSlMacPduTagProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ns3.NrSlMacPduTagProto)
}
NrSlMacPduTagProto::NrSlMacPduTagProto(const NrSlMacPduTagProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_m_sfnsf()) {
    m_sfnsf_ = new ::ns3::NrSlMacPduTagProto_SfnSfProto(*from.m_sfnsf_);
  } else {
    m_sfnsf_ = nullptr;
  }
  ::memcpy(&m_rnti_, &from.m_rnti_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_dstl2id_) -
    reinterpret_cast<char*>(&m_rnti_)) + sizeof(m_dstl2id_));
  // @@protoc_insertion_point(copy_constructor:ns3.NrSlMacPduTagProto)
}

void NrSlMacPduTagProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NrSlMacPduTagProto_sl_2dsci_2dmsg_2eproto.base);
  ::memset(&m_sfnsf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_dstl2id_) -
      reinterpret_cast<char*>(&m_sfnsf_)) + sizeof(m_dstl2id_));
}

NrSlMacPduTagProto::~NrSlMacPduTagProto() {
  // @@protoc_insertion_point(destructor:ns3.NrSlMacPduTagProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NrSlMacPduTagProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete m_sfnsf_;
}

void NrSlMacPduTagProto::ArenaDtor(void* object) {
  NrSlMacPduTagProto* _this = reinterpret_cast< NrSlMacPduTagProto* >(object);
  (void)_this;
}
void NrSlMacPduTagProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NrSlMacPduTagProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NrSlMacPduTagProto& NrSlMacPduTagProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NrSlMacPduTagProto_sl_2dsci_2dmsg_2eproto.base);
  return *internal_default_instance();
}


void NrSlMacPduTagProto::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3.NrSlMacPduTagProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && m_sfnsf_ != nullptr) {
    delete m_sfnsf_;
  }
  m_sfnsf_ = nullptr;
  ::memset(&m_rnti_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_dstl2id_) -
      reinterpret_cast<char*>(&m_rnti_)) + sizeof(m_dstl2id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NrSlMacPduTagProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 m_rnti = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          m_rnti_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 m_symStart = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          m_symstart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 m_numSym = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          m_numsym_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 m_tbSize = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          m_tbsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 m_dstL2Id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          m_dstl2id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ns3.NrSlMacPduTagProto.SfnSfProto m_sfnSf = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_sfnsf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NrSlMacPduTagProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3.NrSlMacPduTagProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 m_rnti = 1;
  if (this->m_rnti() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_m_rnti(), target);
  }

  // uint32 m_symStart = 2;
  if (this->m_symstart() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_m_symstart(), target);
  }

  // uint32 m_numSym = 3;
  if (this->m_numsym() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_m_numsym(), target);
  }

  // uint32 m_tbSize = 4;
  if (this->m_tbsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_m_tbsize(), target);
  }

  // uint32 m_dstL2Id = 5;
  if (this->m_dstl2id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_m_dstl2id(), target);
  }

  // .ns3.NrSlMacPduTagProto.SfnSfProto m_sfnSf = 6;
  if (this->has_m_sfnsf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::m_sfnsf(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3.NrSlMacPduTagProto)
  return target;
}

size_t NrSlMacPduTagProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3.NrSlMacPduTagProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ns3.NrSlMacPduTagProto.SfnSfProto m_sfnSf = 6;
  if (this->has_m_sfnsf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *m_sfnsf_);
  }

  // uint32 m_rnti = 1;
  if (this->m_rnti() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_m_rnti());
  }

  // uint32 m_symStart = 2;
  if (this->m_symstart() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_m_symstart());
  }

  // uint32 m_numSym = 3;
  if (this->m_numsym() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_m_numsym());
  }

  // uint32 m_tbSize = 4;
  if (this->m_tbsize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_m_tbsize());
  }

  // uint32 m_dstL2Id = 5;
  if (this->m_dstl2id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_m_dstl2id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NrSlMacPduTagProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ns3.NrSlMacPduTagProto)
  GOOGLE_DCHECK_NE(&from, this);
  const NrSlMacPduTagProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NrSlMacPduTagProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ns3.NrSlMacPduTagProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ns3.NrSlMacPduTagProto)
    MergeFrom(*source);
  }
}

void NrSlMacPduTagProto::MergeFrom(const NrSlMacPduTagProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3.NrSlMacPduTagProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_m_sfnsf()) {
    _internal_mutable_m_sfnsf()->::ns3::NrSlMacPduTagProto_SfnSfProto::MergeFrom(from._internal_m_sfnsf());
  }
  if (from.m_rnti() != 0) {
    _internal_set_m_rnti(from._internal_m_rnti());
  }
  if (from.m_symstart() != 0) {
    _internal_set_m_symstart(from._internal_m_symstart());
  }
  if (from.m_numsym() != 0) {
    _internal_set_m_numsym(from._internal_m_numsym());
  }
  if (from.m_tbsize() != 0) {
    _internal_set_m_tbsize(from._internal_m_tbsize());
  }
  if (from.m_dstl2id() != 0) {
    _internal_set_m_dstl2id(from._internal_m_dstl2id());
  }
}

void NrSlMacPduTagProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ns3.NrSlMacPduTagProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NrSlMacPduTagProto::CopyFrom(const NrSlMacPduTagProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3.NrSlMacPduTagProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NrSlMacPduTagProto::IsInitialized() const {
  return true;
}

void NrSlMacPduTagProto::InternalSwap(NrSlMacPduTagProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NrSlMacPduTagProto, m_dstl2id_)
      + sizeof(NrSlMacPduTagProto::m_dstl2id_)
      - PROTOBUF_FIELD_OFFSET(NrSlMacPduTagProto, m_sfnsf_)>(
          reinterpret_cast<char*>(&m_sfnsf_),
          reinterpret_cast<char*>(&other->m_sfnsf_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NrSlMacPduTagProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NrSlSciF1aHeaderProto::InitAsDefaultInstance() {
}
class NrSlSciF1aHeaderProto::_Internal {
 public:
};

NrSlSciF1aHeaderProto::NrSlSciF1aHeaderProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sciformat_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ns3.NrSlSciF1aHeaderProto)
}
NrSlSciF1aHeaderProto::NrSlSciF1aHeaderProto(const NrSlSciF1aHeaderProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sciformat_(from.sciformat_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&m_totalsubchannels_, &from.m_totalsubchannels_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_gapretx2_) -
    reinterpret_cast<char*>(&m_totalsubchannels_)) + sizeof(m_gapretx2_));
  // @@protoc_insertion_point(copy_constructor:ns3.NrSlSciF1aHeaderProto)
}

void NrSlSciF1aHeaderProto::SharedCtor() {
  ::memset(&m_totalsubchannels_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_gapretx2_) -
      reinterpret_cast<char*>(&m_totalsubchannels_)) + sizeof(m_gapretx2_));
}

NrSlSciF1aHeaderProto::~NrSlSciF1aHeaderProto() {
  // @@protoc_insertion_point(destructor:ns3.NrSlSciF1aHeaderProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NrSlSciF1aHeaderProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NrSlSciF1aHeaderProto::ArenaDtor(void* object) {
  NrSlSciF1aHeaderProto* _this = reinterpret_cast< NrSlSciF1aHeaderProto* >(object);
  (void)_this;
}
void NrSlSciF1aHeaderProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NrSlSciF1aHeaderProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NrSlSciF1aHeaderProto& NrSlSciF1aHeaderProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NrSlSciF1aHeaderProto_sl_2dsci_2dmsg_2eproto.base);
  return *internal_default_instance();
}


void NrSlSciF1aHeaderProto::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3.NrSlSciF1aHeaderProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sciformat_.Clear();
  ::memset(&m_totalsubchannels_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_gapretx2_) -
      reinterpret_cast<char*>(&m_totalsubchannels_)) + sizeof(m_gapretx2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NrSlSciF1aHeaderProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 m_totalSubChannels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          m_totalsubchannels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 m_priority = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          m_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 m_indexStartSubChannel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          m_indexstartsubchannel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 m_lengthSubChannel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          m_lengthsubchannel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 m_mcs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          m_mcs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 m_slResourceReservePeriod = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          m_slresourcereserveperiod_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 m_slMaxNumPerReserve = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          m_slmaxnumperreserve_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 m_slSciStage2Format = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          m_slscistage2format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 m_indexStartSbChReTx1 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          m_indexstartsbchretx1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 m_indexStartSbChReTx2 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          m_indexstartsbchretx2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 m_gapReTx1 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          m_gapretx1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 m_gapReTx2 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          m_gapretx2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ns3.NrSlSciF1aHeaderProto.SciStage2Format_tProto sciFormat = 13 [packed = true];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_sciformat(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_sciformat(static_cast<::ns3::NrSlSciF1aHeaderProto_SciStage2Format_tProto>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NrSlSciF1aHeaderProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3.NrSlSciF1aHeaderProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 m_totalSubChannels = 1;
  if (this->m_totalsubchannels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_m_totalsubchannels(), target);
  }

  // uint32 m_priority = 2;
  if (this->m_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_m_priority(), target);
  }

  // uint32 m_indexStartSubChannel = 3;
  if (this->m_indexstartsubchannel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_m_indexstartsubchannel(), target);
  }

  // uint32 m_lengthSubChannel = 4;
  if (this->m_lengthsubchannel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_m_lengthsubchannel(), target);
  }

  // uint32 m_mcs = 5;
  if (this->m_mcs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_m_mcs(), target);
  }

  // uint32 m_slResourceReservePeriod = 6;
  if (this->m_slresourcereserveperiod() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_m_slresourcereserveperiod(), target);
  }

  // uint32 m_slMaxNumPerReserve = 7;
  if (this->m_slmaxnumperreserve() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_m_slmaxnumperreserve(), target);
  }

  // uint32 m_slSciStage2Format = 8;
  if (this->m_slscistage2format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_m_slscistage2format(), target);
  }

  // uint32 m_indexStartSbChReTx1 = 9;
  if (this->m_indexstartsbchretx1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_m_indexstartsbchretx1(), target);
  }

  // uint32 m_indexStartSbChReTx2 = 10;
  if (this->m_indexstartsbchretx2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_m_indexstartsbchretx2(), target);
  }

  // uint32 m_gapReTx1 = 11;
  if (this->m_gapretx1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_m_gapretx1(), target);
  }

  // uint32 m_gapReTx2 = 12;
  if (this->m_gapretx2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_m_gapretx2(), target);
  }

  // repeated .ns3.NrSlSciF1aHeaderProto.SciStage2Format_tProto sciFormat = 13 [packed = true];
  {
    int byte_size = _sciformat_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          13, sciformat_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3.NrSlSciF1aHeaderProto)
  return target;
}

size_t NrSlSciF1aHeaderProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3.NrSlSciF1aHeaderProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ns3.NrSlSciF1aHeaderProto.SciStage2Format_tProto sciFormat = 13 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_sciformat_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_sciformat(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _sciformat_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 m_totalSubChannels = 1;
  if (this->m_totalsubchannels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_m_totalsubchannels());
  }

  // uint32 m_priority = 2;
  if (this->m_priority() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_m_priority());
  }

  // uint32 m_indexStartSubChannel = 3;
  if (this->m_indexstartsubchannel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_m_indexstartsubchannel());
  }

  // uint32 m_lengthSubChannel = 4;
  if (this->m_lengthsubchannel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_m_lengthsubchannel());
  }

  // uint32 m_mcs = 5;
  if (this->m_mcs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_m_mcs());
  }

  // uint32 m_slResourceReservePeriod = 6;
  if (this->m_slresourcereserveperiod() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_m_slresourcereserveperiod());
  }

  // uint32 m_slMaxNumPerReserve = 7;
  if (this->m_slmaxnumperreserve() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_m_slmaxnumperreserve());
  }

  // uint32 m_slSciStage2Format = 8;
  if (this->m_slscistage2format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_m_slscistage2format());
  }

  // uint32 m_indexStartSbChReTx1 = 9;
  if (this->m_indexstartsbchretx1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_m_indexstartsbchretx1());
  }

  // uint32 m_indexStartSbChReTx2 = 10;
  if (this->m_indexstartsbchretx2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_m_indexstartsbchretx2());
  }

  // uint32 m_gapReTx1 = 11;
  if (this->m_gapretx1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_m_gapretx1());
  }

  // uint32 m_gapReTx2 = 12;
  if (this->m_gapretx2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_m_gapretx2());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NrSlSciF1aHeaderProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ns3.NrSlSciF1aHeaderProto)
  GOOGLE_DCHECK_NE(&from, this);
  const NrSlSciF1aHeaderProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NrSlSciF1aHeaderProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ns3.NrSlSciF1aHeaderProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ns3.NrSlSciF1aHeaderProto)
    MergeFrom(*source);
  }
}

void NrSlSciF1aHeaderProto::MergeFrom(const NrSlSciF1aHeaderProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3.NrSlSciF1aHeaderProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sciformat_.MergeFrom(from.sciformat_);
  if (from.m_totalsubchannels() != 0) {
    _internal_set_m_totalsubchannels(from._internal_m_totalsubchannels());
  }
  if (from.m_priority() != 0) {
    _internal_set_m_priority(from._internal_m_priority());
  }
  if (from.m_indexstartsubchannel() != 0) {
    _internal_set_m_indexstartsubchannel(from._internal_m_indexstartsubchannel());
  }
  if (from.m_lengthsubchannel() != 0) {
    _internal_set_m_lengthsubchannel(from._internal_m_lengthsubchannel());
  }
  if (from.m_mcs() != 0) {
    _internal_set_m_mcs(from._internal_m_mcs());
  }
  if (from.m_slresourcereserveperiod() != 0) {
    _internal_set_m_slresourcereserveperiod(from._internal_m_slresourcereserveperiod());
  }
  if (from.m_slmaxnumperreserve() != 0) {
    _internal_set_m_slmaxnumperreserve(from._internal_m_slmaxnumperreserve());
  }
  if (from.m_slscistage2format() != 0) {
    _internal_set_m_slscistage2format(from._internal_m_slscistage2format());
  }
  if (from.m_indexstartsbchretx1() != 0) {
    _internal_set_m_indexstartsbchretx1(from._internal_m_indexstartsbchretx1());
  }
  if (from.m_indexstartsbchretx2() != 0) {
    _internal_set_m_indexstartsbchretx2(from._internal_m_indexstartsbchretx2());
  }
  if (from.m_gapretx1() != 0) {
    _internal_set_m_gapretx1(from._internal_m_gapretx1());
  }
  if (from.m_gapretx2() != 0) {
    _internal_set_m_gapretx2(from._internal_m_gapretx2());
  }
}

void NrSlSciF1aHeaderProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ns3.NrSlSciF1aHeaderProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NrSlSciF1aHeaderProto::CopyFrom(const NrSlSciF1aHeaderProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3.NrSlSciF1aHeaderProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NrSlSciF1aHeaderProto::IsInitialized() const {
  return true;
}

void NrSlSciF1aHeaderProto::InternalSwap(NrSlSciF1aHeaderProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sciformat_.InternalSwap(&other->sciformat_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NrSlSciF1aHeaderProto, m_gapretx2_)
      + sizeof(NrSlSciF1aHeaderProto::m_gapretx2_)
      - PROTOBUF_FIELD_OFFSET(NrSlSciF1aHeaderProto, m_totalsubchannels_)>(
          reinterpret_cast<char*>(&m_totalsubchannels_),
          reinterpret_cast<char*>(&other->m_totalsubchannels_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NrSlSciF1aHeaderProto::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ns3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ns3::NrSlMacPduTagProto_SfnSfProto* Arena::CreateMaybeMessage< ::ns3::NrSlMacPduTagProto_SfnSfProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3::NrSlMacPduTagProto_SfnSfProto >(arena);
}
template<> PROTOBUF_NOINLINE ::ns3::NrSlMacPduTagProto* Arena::CreateMaybeMessage< ::ns3::NrSlMacPduTagProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3::NrSlMacPduTagProto >(arena);
}
template<> PROTOBUF_NOINLINE ::ns3::NrSlSciF1aHeaderProto* Arena::CreateMaybeMessage< ::ns3::NrSlSciF1aHeaderProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3::NrSlSciF1aHeaderProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
