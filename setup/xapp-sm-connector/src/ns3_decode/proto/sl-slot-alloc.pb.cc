// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/sl-slot-alloc.proto

#include "proto/sl-slot-alloc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2fsl_2dsfnsf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SfnSfProto_proto_2fsl_2dsfnsf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fsl_2dslot_2dalloc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SlRlcPduInfoProto_proto_2fsl_2dslot_2dalloc_2eproto;
namespace ns3 {
class SlRlcPduInfoProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SlRlcPduInfoProto> _instance;
} _SlRlcPduInfoProto_default_instance_;
class NrSlSlotAllocProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NrSlSlotAllocProto> _instance;
} _NrSlSlotAllocProto_default_instance_;
}  // namespace ns3
static void InitDefaultsscc_info_NrSlSlotAllocProto_proto_2fsl_2dslot_2dalloc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ns3::_NrSlSlotAllocProto_default_instance_;
    new (ptr) ::ns3::NrSlSlotAllocProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ns3::NrSlSlotAllocProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_NrSlSlotAllocProto_proto_2fsl_2dslot_2dalloc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_NrSlSlotAllocProto_proto_2fsl_2dslot_2dalloc_2eproto}, {
      &scc_info_SfnSfProto_proto_2fsl_2dsfnsf_2eproto.base,
      &scc_info_SlRlcPduInfoProto_proto_2fsl_2dslot_2dalloc_2eproto.base,}};

static void InitDefaultsscc_info_SlRlcPduInfoProto_proto_2fsl_2dslot_2dalloc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ns3::_SlRlcPduInfoProto_default_instance_;
    new (ptr) ::ns3::SlRlcPduInfoProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ns3::SlRlcPduInfoProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SlRlcPduInfoProto_proto_2fsl_2dslot_2dalloc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SlRlcPduInfoProto_proto_2fsl_2dslot_2dalloc_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fsl_2dslot_2dalloc_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2fsl_2dslot_2dalloc_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fsl_2dslot_2dalloc_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fsl_2dslot_2dalloc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns3::SlRlcPduInfoProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ns3::SlRlcPduInfoProto, lcid_),
  PROTOBUF_FIELD_OFFSET(::ns3::SlRlcPduInfoProto, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns3::NrSlSlotAllocProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ns3::NrSlSlotAllocProto, sfn_),
  PROTOBUF_FIELD_OFFSET(::ns3::NrSlSlotAllocProto, dstl2id_),
  PROTOBUF_FIELD_OFFSET(::ns3::NrSlSlotAllocProto, ndi_),
  PROTOBUF_FIELD_OFFSET(::ns3::NrSlSlotAllocProto, rv_),
  PROTOBUF_FIELD_OFFSET(::ns3::NrSlSlotAllocProto, priority_),
  PROTOBUF_FIELD_OFFSET(::ns3::NrSlSlotAllocProto, slrlcpduinfo_),
  PROTOBUF_FIELD_OFFSET(::ns3::NrSlSlotAllocProto, mcs_),
  PROTOBUF_FIELD_OFFSET(::ns3::NrSlSlotAllocProto, numslpscchrbs_),
  PROTOBUF_FIELD_OFFSET(::ns3::NrSlSlotAllocProto, slpscchsymstart_),
  PROTOBUF_FIELD_OFFSET(::ns3::NrSlSlotAllocProto, slpscchsymlength_),
  PROTOBUF_FIELD_OFFSET(::ns3::NrSlSlotAllocProto, slpsschsymstart_),
  PROTOBUF_FIELD_OFFSET(::ns3::NrSlSlotAllocProto, slpsschsymlength_),
  PROTOBUF_FIELD_OFFSET(::ns3::NrSlSlotAllocProto, slpsschsubchstart_),
  PROTOBUF_FIELD_OFFSET(::ns3::NrSlSlotAllocProto, slpsschsubchlength_),
  PROTOBUF_FIELD_OFFSET(::ns3::NrSlSlotAllocProto, maxnumperreserve_),
  PROTOBUF_FIELD_OFFSET(::ns3::NrSlSlotAllocProto, txsci1a_),
  PROTOBUF_FIELD_OFFSET(::ns3::NrSlSlotAllocProto, slotnumind_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ns3::SlRlcPduInfoProto)},
  { 7, -1, sizeof(::ns3::NrSlSlotAllocProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ns3::_SlRlcPduInfoProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ns3::_NrSlSlotAllocProto_default_instance_),
};

const char descriptor_table_protodef_proto_2fsl_2dslot_2dalloc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031proto/sl-slot-alloc.proto\022\003ns3\032\024proto/"
  "sl-sfnsf.proto\"/\n\021SlRlcPduInfoProto\022\014\n\004l"
  "cid\030\001 \001(\r\022\014\n\004size\030\002 \001(\r\"\234\003\n\022NrSlSlotAllo"
  "cProto\022\034\n\003sfn\030\020 \001(\0132\017.ns3.SfnSfProto\022\017\n\007"
  "dstL2Id\030\017 \001(\r\022\013\n\003ndi\030\016 \001(\r\022\n\n\002rv\030\r \001(\r\022\020"
  "\n\010priority\030\014 \001(\r\022,\n\014slRlcPduInfo\030\021 \003(\0132\026"
  ".ns3.SlRlcPduInfoProto\022\013\n\003mcs\030\013 \001(\r\022\025\n\rn"
  "umSlPscchRbs\030\n \001(\r\022\027\n\017slPscchSymStart\030\t "
  "\001(\r\022\030\n\020slPscchSymLength\030\010 \001(\r\022\027\n\017slPssch"
  "SymStart\030\007 \001(\r\022\030\n\020slPsschSymLength\030\006 \001(\r"
  "\022\031\n\021slPsschSubChStart\030\005 \001(\r\022\032\n\022slPsschSu"
  "bChLength\030\001 \001(\r\022\030\n\020maxNumPerReserve\030\002 \001("
  "\r\022\017\n\007txSci1A\030\003 \001(\010\022\022\n\nslotNumInd\030\004 \001(\rb\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2fsl_2dslot_2dalloc_2eproto_deps[1] = {
  &::descriptor_table_proto_2fsl_2dsfnsf_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2fsl_2dslot_2dalloc_2eproto_sccs[2] = {
  &scc_info_NrSlSlotAllocProto_proto_2fsl_2dslot_2dalloc_2eproto.base,
  &scc_info_SlRlcPduInfoProto_proto_2fsl_2dslot_2dalloc_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fsl_2dslot_2dalloc_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fsl_2dslot_2dalloc_2eproto = {
  false, false, descriptor_table_protodef_proto_2fsl_2dslot_2dalloc_2eproto, "proto/sl-slot-alloc.proto", 526,
  &descriptor_table_proto_2fsl_2dslot_2dalloc_2eproto_once, descriptor_table_proto_2fsl_2dslot_2dalloc_2eproto_sccs, descriptor_table_proto_2fsl_2dslot_2dalloc_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_proto_2fsl_2dslot_2dalloc_2eproto::offsets,
  file_level_metadata_proto_2fsl_2dslot_2dalloc_2eproto, 2, file_level_enum_descriptors_proto_2fsl_2dslot_2dalloc_2eproto, file_level_service_descriptors_proto_2fsl_2dslot_2dalloc_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2fsl_2dslot_2dalloc_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2fsl_2dslot_2dalloc_2eproto)), true);
namespace ns3 {

// ===================================================================

void SlRlcPduInfoProto::InitAsDefaultInstance() {
}
class SlRlcPduInfoProto::_Internal {
 public:
};

SlRlcPduInfoProto::SlRlcPduInfoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ns3.SlRlcPduInfoProto)
}
SlRlcPduInfoProto::SlRlcPduInfoProto(const SlRlcPduInfoProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lcid_, &from.lcid_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&lcid_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:ns3.SlRlcPduInfoProto)
}

void SlRlcPduInfoProto::SharedCtor() {
  ::memset(&lcid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&lcid_)) + sizeof(size_));
}

SlRlcPduInfoProto::~SlRlcPduInfoProto() {
  // @@protoc_insertion_point(destructor:ns3.SlRlcPduInfoProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SlRlcPduInfoProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SlRlcPduInfoProto::ArenaDtor(void* object) {
  SlRlcPduInfoProto* _this = reinterpret_cast< SlRlcPduInfoProto* >(object);
  (void)_this;
}
void SlRlcPduInfoProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SlRlcPduInfoProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SlRlcPduInfoProto& SlRlcPduInfoProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SlRlcPduInfoProto_proto_2fsl_2dslot_2dalloc_2eproto.base);
  return *internal_default_instance();
}


void SlRlcPduInfoProto::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3.SlRlcPduInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lcid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&lcid_)) + sizeof(size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlRlcPduInfoProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 lcid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          lcid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SlRlcPduInfoProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3.SlRlcPduInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 lcid = 1;
  if (this->lcid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_lcid(), target);
  }

  // uint32 size = 2;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3.SlRlcPduInfoProto)
  return target;
}

size_t SlRlcPduInfoProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3.SlRlcPduInfoProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 lcid = 1;
  if (this->lcid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lcid());
  }

  // uint32 size = 2;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SlRlcPduInfoProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ns3.SlRlcPduInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  const SlRlcPduInfoProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SlRlcPduInfoProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ns3.SlRlcPduInfoProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ns3.SlRlcPduInfoProto)
    MergeFrom(*source);
  }
}

void SlRlcPduInfoProto::MergeFrom(const SlRlcPduInfoProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3.SlRlcPduInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lcid() != 0) {
    _internal_set_lcid(from._internal_lcid());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void SlRlcPduInfoProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ns3.SlRlcPduInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlRlcPduInfoProto::CopyFrom(const SlRlcPduInfoProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3.SlRlcPduInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlRlcPduInfoProto::IsInitialized() const {
  return true;
}

void SlRlcPduInfoProto::InternalSwap(SlRlcPduInfoProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SlRlcPduInfoProto, size_)
      + sizeof(SlRlcPduInfoProto::size_)
      - PROTOBUF_FIELD_OFFSET(SlRlcPduInfoProto, lcid_)>(
          reinterpret_cast<char*>(&lcid_),
          reinterpret_cast<char*>(&other->lcid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SlRlcPduInfoProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NrSlSlotAllocProto::InitAsDefaultInstance() {
  ::ns3::_NrSlSlotAllocProto_default_instance_._instance.get_mutable()->sfn_ = const_cast< ::ns3::SfnSfProto*>(
      ::ns3::SfnSfProto::internal_default_instance());
}
class NrSlSlotAllocProto::_Internal {
 public:
  static const ::ns3::SfnSfProto& sfn(const NrSlSlotAllocProto* msg);
};

const ::ns3::SfnSfProto&
NrSlSlotAllocProto::_Internal::sfn(const NrSlSlotAllocProto* msg) {
  return *msg->sfn_;
}
void NrSlSlotAllocProto::clear_sfn() {
  if (GetArena() == nullptr && sfn_ != nullptr) {
    delete sfn_;
  }
  sfn_ = nullptr;
}
NrSlSlotAllocProto::NrSlSlotAllocProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  slrlcpduinfo_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ns3.NrSlSlotAllocProto)
}
NrSlSlotAllocProto::NrSlSlotAllocProto(const NrSlSlotAllocProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      slrlcpduinfo_(from.slrlcpduinfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sfn()) {
    sfn_ = new ::ns3::SfnSfProto(*from.sfn_);
  } else {
    sfn_ = nullptr;
  }
  ::memcpy(&slpsschsubchlength_, &from.slpsschsubchlength_,
    static_cast<size_t>(reinterpret_cast<char*>(&dstl2id_) -
    reinterpret_cast<char*>(&slpsschsubchlength_)) + sizeof(dstl2id_));
  // @@protoc_insertion_point(copy_constructor:ns3.NrSlSlotAllocProto)
}

void NrSlSlotAllocProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NrSlSlotAllocProto_proto_2fsl_2dslot_2dalloc_2eproto.base);
  ::memset(&sfn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dstl2id_) -
      reinterpret_cast<char*>(&sfn_)) + sizeof(dstl2id_));
}

NrSlSlotAllocProto::~NrSlSlotAllocProto() {
  // @@protoc_insertion_point(destructor:ns3.NrSlSlotAllocProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NrSlSlotAllocProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete sfn_;
}

void NrSlSlotAllocProto::ArenaDtor(void* object) {
  NrSlSlotAllocProto* _this = reinterpret_cast< NrSlSlotAllocProto* >(object);
  (void)_this;
}
void NrSlSlotAllocProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NrSlSlotAllocProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NrSlSlotAllocProto& NrSlSlotAllocProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NrSlSlotAllocProto_proto_2fsl_2dslot_2dalloc_2eproto.base);
  return *internal_default_instance();
}


void NrSlSlotAllocProto::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3.NrSlSlotAllocProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slrlcpduinfo_.Clear();
  if (GetArena() == nullptr && sfn_ != nullptr) {
    delete sfn_;
  }
  sfn_ = nullptr;
  ::memset(&slpsschsubchlength_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dstl2id_) -
      reinterpret_cast<char*>(&slpsschsubchlength_)) + sizeof(dstl2id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NrSlSlotAllocProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 slPsschSubChLength = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          slpsschsubchlength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 maxNumPerReserve = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          maxnumperreserve_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool txSci1A = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          txsci1a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 slotNumInd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          slotnumind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 slPsschSubChStart = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          slpsschsubchstart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 slPsschSymLength = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          slpsschsymlength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 slPsschSymStart = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          slpsschsymstart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 slPscchSymLength = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          slpscchsymlength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 slPscchSymStart = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          slpscchsymstart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 numSlPscchRbs = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          numslpscchrbs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 mcs = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          mcs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 priority = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rv = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          rv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ndi = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ndi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 dstL2Id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          dstl2id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ns3.SfnSfProto sfn = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_sfn(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ns3.SlRlcPduInfoProto slRlcPduInfo = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_slrlcpduinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NrSlSlotAllocProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3.NrSlSlotAllocProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 slPsschSubChLength = 1;
  if (this->slpsschsubchlength() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_slpsschsubchlength(), target);
  }

  // uint32 maxNumPerReserve = 2;
  if (this->maxnumperreserve() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_maxnumperreserve(), target);
  }

  // bool txSci1A = 3;
  if (this->txsci1a() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_txsci1a(), target);
  }

  // uint32 slotNumInd = 4;
  if (this->slotnumind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_slotnumind(), target);
  }

  // uint32 slPsschSubChStart = 5;
  if (this->slpsschsubchstart() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_slpsschsubchstart(), target);
  }

  // uint32 slPsschSymLength = 6;
  if (this->slpsschsymlength() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_slpsschsymlength(), target);
  }

  // uint32 slPsschSymStart = 7;
  if (this->slpsschsymstart() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_slpsschsymstart(), target);
  }

  // uint32 slPscchSymLength = 8;
  if (this->slpscchsymlength() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_slpscchsymlength(), target);
  }

  // uint32 slPscchSymStart = 9;
  if (this->slpscchsymstart() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_slpscchsymstart(), target);
  }

  // uint32 numSlPscchRbs = 10;
  if (this->numslpscchrbs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_numslpscchrbs(), target);
  }

  // uint32 mcs = 11;
  if (this->mcs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_mcs(), target);
  }

  // uint32 priority = 12;
  if (this->priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_priority(), target);
  }

  // uint32 rv = 13;
  if (this->rv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_rv(), target);
  }

  // uint32 ndi = 14;
  if (this->ndi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_ndi(), target);
  }

  // uint32 dstL2Id = 15;
  if (this->dstl2id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_dstl2id(), target);
  }

  // .ns3.SfnSfProto sfn = 16;
  if (this->has_sfn()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::sfn(this), target, stream);
  }

  // repeated .ns3.SlRlcPduInfoProto slRlcPduInfo = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_slrlcpduinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_slrlcpduinfo(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3.NrSlSlotAllocProto)
  return target;
}

size_t NrSlSlotAllocProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3.NrSlSlotAllocProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ns3.SlRlcPduInfoProto slRlcPduInfo = 17;
  total_size += 2UL * this->_internal_slrlcpduinfo_size();
  for (const auto& msg : this->slrlcpduinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .ns3.SfnSfProto sfn = 16;
  if (this->has_sfn()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sfn_);
  }

  // uint32 slPsschSubChLength = 1;
  if (this->slpsschsubchlength() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_slpsschsubchlength());
  }

  // uint32 maxNumPerReserve = 2;
  if (this->maxnumperreserve() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxnumperreserve());
  }

  // bool txSci1A = 3;
  if (this->txsci1a() != 0) {
    total_size += 1 + 1;
  }

  // uint32 slotNumInd = 4;
  if (this->slotnumind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_slotnumind());
  }

  // uint32 slPsschSubChStart = 5;
  if (this->slpsschsubchstart() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_slpsschsubchstart());
  }

  // uint32 slPsschSymLength = 6;
  if (this->slpsschsymlength() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_slpsschsymlength());
  }

  // uint32 slPsschSymStart = 7;
  if (this->slpsschsymstart() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_slpsschsymstart());
  }

  // uint32 slPscchSymLength = 8;
  if (this->slpscchsymlength() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_slpscchsymlength());
  }

  // uint32 slPscchSymStart = 9;
  if (this->slpscchsymstart() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_slpscchsymstart());
  }

  // uint32 numSlPscchRbs = 10;
  if (this->numslpscchrbs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_numslpscchrbs());
  }

  // uint32 mcs = 11;
  if (this->mcs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mcs());
  }

  // uint32 priority = 12;
  if (this->priority() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_priority());
  }

  // uint32 rv = 13;
  if (this->rv() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rv());
  }

  // uint32 ndi = 14;
  if (this->ndi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ndi());
  }

  // uint32 dstL2Id = 15;
  if (this->dstl2id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dstl2id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NrSlSlotAllocProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ns3.NrSlSlotAllocProto)
  GOOGLE_DCHECK_NE(&from, this);
  const NrSlSlotAllocProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NrSlSlotAllocProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ns3.NrSlSlotAllocProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ns3.NrSlSlotAllocProto)
    MergeFrom(*source);
  }
}

void NrSlSlotAllocProto::MergeFrom(const NrSlSlotAllocProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3.NrSlSlotAllocProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  slrlcpduinfo_.MergeFrom(from.slrlcpduinfo_);
  if (from.has_sfn()) {
    _internal_mutable_sfn()->::ns3::SfnSfProto::MergeFrom(from._internal_sfn());
  }
  if (from.slpsschsubchlength() != 0) {
    _internal_set_slpsschsubchlength(from._internal_slpsschsubchlength());
  }
  if (from.maxnumperreserve() != 0) {
    _internal_set_maxnumperreserve(from._internal_maxnumperreserve());
  }
  if (from.txsci1a() != 0) {
    _internal_set_txsci1a(from._internal_txsci1a());
  }
  if (from.slotnumind() != 0) {
    _internal_set_slotnumind(from._internal_slotnumind());
  }
  if (from.slpsschsubchstart() != 0) {
    _internal_set_slpsschsubchstart(from._internal_slpsschsubchstart());
  }
  if (from.slpsschsymlength() != 0) {
    _internal_set_slpsschsymlength(from._internal_slpsschsymlength());
  }
  if (from.slpsschsymstart() != 0) {
    _internal_set_slpsschsymstart(from._internal_slpsschsymstart());
  }
  if (from.slpscchsymlength() != 0) {
    _internal_set_slpscchsymlength(from._internal_slpscchsymlength());
  }
  if (from.slpscchsymstart() != 0) {
    _internal_set_slpscchsymstart(from._internal_slpscchsymstart());
  }
  if (from.numslpscchrbs() != 0) {
    _internal_set_numslpscchrbs(from._internal_numslpscchrbs());
  }
  if (from.mcs() != 0) {
    _internal_set_mcs(from._internal_mcs());
  }
  if (from.priority() != 0) {
    _internal_set_priority(from._internal_priority());
  }
  if (from.rv() != 0) {
    _internal_set_rv(from._internal_rv());
  }
  if (from.ndi() != 0) {
    _internal_set_ndi(from._internal_ndi());
  }
  if (from.dstl2id() != 0) {
    _internal_set_dstl2id(from._internal_dstl2id());
  }
}

void NrSlSlotAllocProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ns3.NrSlSlotAllocProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NrSlSlotAllocProto::CopyFrom(const NrSlSlotAllocProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3.NrSlSlotAllocProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NrSlSlotAllocProto::IsInitialized() const {
  return true;
}

void NrSlSlotAllocProto::InternalSwap(NrSlSlotAllocProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  slrlcpduinfo_.InternalSwap(&other->slrlcpduinfo_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NrSlSlotAllocProto, dstl2id_)
      + sizeof(NrSlSlotAllocProto::dstl2id_)
      - PROTOBUF_FIELD_OFFSET(NrSlSlotAllocProto, sfn_)>(
          reinterpret_cast<char*>(&sfn_),
          reinterpret_cast<char*>(&other->sfn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NrSlSlotAllocProto::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ns3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ns3::SlRlcPduInfoProto* Arena::CreateMaybeMessage< ::ns3::SlRlcPduInfoProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3::SlRlcPduInfoProto >(arena);
}
template<> PROTOBUF_NOINLINE ::ns3::NrSlSlotAllocProto* Arena::CreateMaybeMessage< ::ns3::NrSlSlotAllocProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3::NrSlSlotAllocProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
