// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl-slot-alloc.proto

#include "sl-slot-alloc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_sl_2dsfnsf_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sl_2dsfnsf_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SfnSfProto;
}  // namespace protobuf_sl_2dsfnsf_2eproto
namespace protobuf_sl_2dslot_2dalloc_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sl_2dslot_2dalloc_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SlRlcPduInfoProto;
}  // namespace protobuf_sl_2dslot_2dalloc_2eproto
namespace ns3 {
class SlRlcPduInfoProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SlRlcPduInfoProto>
      _instance;
} _SlRlcPduInfoProto_default_instance_;
class NrSlSlotAllocProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NrSlSlotAllocProto>
      _instance;
} _NrSlSlotAllocProto_default_instance_;
}  // namespace ns3
namespace protobuf_sl_2dslot_2dalloc_2eproto {
static void InitDefaultsSlRlcPduInfoProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ns3::_SlRlcPduInfoProto_default_instance_;
    new (ptr) ::ns3::SlRlcPduInfoProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ns3::SlRlcPduInfoProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SlRlcPduInfoProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSlRlcPduInfoProto}, {}};

static void InitDefaultsNrSlSlotAllocProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ns3::_NrSlSlotAllocProto_default_instance_;
    new (ptr) ::ns3::NrSlSlotAllocProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ns3::NrSlSlotAllocProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_NrSlSlotAllocProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsNrSlSlotAllocProto}, {
      &protobuf_sl_2dsfnsf_2eproto::scc_info_SfnSfProto.base,
      &protobuf_sl_2dslot_2dalloc_2eproto::scc_info_SlRlcPduInfoProto.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_SlRlcPduInfoProto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NrSlSlotAllocProto.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ns3::SlRlcPduInfoProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ns3::SlRlcPduInfoProto, lcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ns3::SlRlcPduInfoProto, size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ns3::NrSlSlotAllocProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ns3::NrSlSlotAllocProto, sfn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ns3::NrSlSlotAllocProto, dstl2id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ns3::NrSlSlotAllocProto, ndi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ns3::NrSlSlotAllocProto, rv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ns3::NrSlSlotAllocProto, priority_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ns3::NrSlSlotAllocProto, slrlcpduinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ns3::NrSlSlotAllocProto, mcs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ns3::NrSlSlotAllocProto, numslpscchrbs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ns3::NrSlSlotAllocProto, slpscchsymstart_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ns3::NrSlSlotAllocProto, slpscchsymlength_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ns3::NrSlSlotAllocProto, slpsschsymstart_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ns3::NrSlSlotAllocProto, slpsschsymlength_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ns3::NrSlSlotAllocProto, slpsschsubchstart_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ns3::NrSlSlotAllocProto, slpsschsubchlength_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ns3::NrSlSlotAllocProto, maxnumperreserve_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ns3::NrSlSlotAllocProto, txsci1a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ns3::NrSlSlotAllocProto, slotnumind_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ns3::SlRlcPduInfoProto)},
  { 7, -1, sizeof(::ns3::NrSlSlotAllocProto)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ns3::_SlRlcPduInfoProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ns3::_NrSlSlotAllocProto_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "sl-slot-alloc.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023sl-slot-alloc.proto\022\003ns3\032\016sl-sfnsf.pro"
      "to\"/\n\021SlRlcPduInfoProto\022\014\n\004lcid\030\001 \001(\r\022\014\n"
      "\004size\030\002 \001(\r\"\234\003\n\022NrSlSlotAllocProto\022\034\n\003sf"
      "n\030\020 \001(\0132\017.ns3.SfnSfProto\022\017\n\007dstL2Id\030\017 \001("
      "\r\022\013\n\003ndi\030\016 \001(\r\022\n\n\002rv\030\r \001(\r\022\020\n\010priority\030\014"
      " \001(\r\022,\n\014slRlcPduInfo\030\021 \003(\0132\026.ns3.SlRlcPd"
      "uInfoProto\022\013\n\003mcs\030\013 \001(\r\022\025\n\rnumSlPscchRbs"
      "\030\n \001(\r\022\027\n\017slPscchSymStart\030\t \001(\r\022\030\n\020slPsc"
      "chSymLength\030\010 \001(\r\022\027\n\017slPsschSymStart\030\007 \001"
      "(\r\022\030\n\020slPsschSymLength\030\006 \001(\r\022\031\n\021slPsschS"
      "ubChStart\030\005 \001(\r\022\032\n\022slPsschSubChLength\030\001 "
      "\001(\r\022\030\n\020maxNumPerReserve\030\002 \001(\r\022\017\n\007txSci1A"
      "\030\003 \001(\010\022\022\n\nslotNumInd\030\004 \001(\rb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 514);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sl-slot-alloc.proto", &protobuf_RegisterTypes);
  ::protobuf_sl_2dsfnsf_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_sl_2dslot_2dalloc_2eproto
namespace ns3 {

// ===================================================================

void SlRlcPduInfoProto::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SlRlcPduInfoProto::kLcidFieldNumber;
const int SlRlcPduInfoProto::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SlRlcPduInfoProto::SlRlcPduInfoProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sl_2dslot_2dalloc_2eproto::scc_info_SlRlcPduInfoProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ns3.SlRlcPduInfoProto)
}
SlRlcPduInfoProto::SlRlcPduInfoProto(const SlRlcPduInfoProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lcid_, &from.lcid_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&lcid_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:ns3.SlRlcPduInfoProto)
}

void SlRlcPduInfoProto::SharedCtor() {
  ::memset(&lcid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&lcid_)) + sizeof(size_));
}

SlRlcPduInfoProto::~SlRlcPduInfoProto() {
  // @@protoc_insertion_point(destructor:ns3.SlRlcPduInfoProto)
  SharedDtor();
}

void SlRlcPduInfoProto::SharedDtor() {
}

void SlRlcPduInfoProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SlRlcPduInfoProto::descriptor() {
  ::protobuf_sl_2dslot_2dalloc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sl_2dslot_2dalloc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SlRlcPduInfoProto& SlRlcPduInfoProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sl_2dslot_2dalloc_2eproto::scc_info_SlRlcPduInfoProto.base);
  return *internal_default_instance();
}


void SlRlcPduInfoProto::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3.SlRlcPduInfoProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lcid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&lcid_)) + sizeof(size_));
  _internal_metadata_.Clear();
}

bool SlRlcPduInfoProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ns3.SlRlcPduInfoProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 lcid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ns3.SlRlcPduInfoProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ns3.SlRlcPduInfoProto)
  return false;
#undef DO_
}

void SlRlcPduInfoProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ns3.SlRlcPduInfoProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 lcid = 1;
  if (this->lcid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->lcid(), output);
  }

  // uint32 size = 2;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ns3.SlRlcPduInfoProto)
}

::google::protobuf::uint8* SlRlcPduInfoProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ns3.SlRlcPduInfoProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 lcid = 1;
  if (this->lcid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->lcid(), target);
  }

  // uint32 size = 2;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3.SlRlcPduInfoProto)
  return target;
}

size_t SlRlcPduInfoProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3.SlRlcPduInfoProto)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 lcid = 1;
  if (this->lcid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lcid());
  }

  // uint32 size = 2;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SlRlcPduInfoProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ns3.SlRlcPduInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  const SlRlcPduInfoProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SlRlcPduInfoProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ns3.SlRlcPduInfoProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ns3.SlRlcPduInfoProto)
    MergeFrom(*source);
  }
}

void SlRlcPduInfoProto::MergeFrom(const SlRlcPduInfoProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3.SlRlcPduInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lcid() != 0) {
    set_lcid(from.lcid());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
}

void SlRlcPduInfoProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ns3.SlRlcPduInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlRlcPduInfoProto::CopyFrom(const SlRlcPduInfoProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3.SlRlcPduInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlRlcPduInfoProto::IsInitialized() const {
  return true;
}

void SlRlcPduInfoProto::Swap(SlRlcPduInfoProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SlRlcPduInfoProto::InternalSwap(SlRlcPduInfoProto* other) {
  using std::swap;
  swap(lcid_, other->lcid_);
  swap(size_, other->size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SlRlcPduInfoProto::GetMetadata() const {
  protobuf_sl_2dslot_2dalloc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sl_2dslot_2dalloc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NrSlSlotAllocProto::InitAsDefaultInstance() {
  ::ns3::_NrSlSlotAllocProto_default_instance_._instance.get_mutable()->sfn_ = const_cast< ::ns3::SfnSfProto*>(
      ::ns3::SfnSfProto::internal_default_instance());
}
void NrSlSlotAllocProto::clear_sfn() {
  if (GetArenaNoVirtual() == NULL && sfn_ != NULL) {
    delete sfn_;
  }
  sfn_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NrSlSlotAllocProto::kSfnFieldNumber;
const int NrSlSlotAllocProto::kDstL2IdFieldNumber;
const int NrSlSlotAllocProto::kNdiFieldNumber;
const int NrSlSlotAllocProto::kRvFieldNumber;
const int NrSlSlotAllocProto::kPriorityFieldNumber;
const int NrSlSlotAllocProto::kSlRlcPduInfoFieldNumber;
const int NrSlSlotAllocProto::kMcsFieldNumber;
const int NrSlSlotAllocProto::kNumSlPscchRbsFieldNumber;
const int NrSlSlotAllocProto::kSlPscchSymStartFieldNumber;
const int NrSlSlotAllocProto::kSlPscchSymLengthFieldNumber;
const int NrSlSlotAllocProto::kSlPsschSymStartFieldNumber;
const int NrSlSlotAllocProto::kSlPsschSymLengthFieldNumber;
const int NrSlSlotAllocProto::kSlPsschSubChStartFieldNumber;
const int NrSlSlotAllocProto::kSlPsschSubChLengthFieldNumber;
const int NrSlSlotAllocProto::kMaxNumPerReserveFieldNumber;
const int NrSlSlotAllocProto::kTxSci1AFieldNumber;
const int NrSlSlotAllocProto::kSlotNumIndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NrSlSlotAllocProto::NrSlSlotAllocProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sl_2dslot_2dalloc_2eproto::scc_info_NrSlSlotAllocProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ns3.NrSlSlotAllocProto)
}
NrSlSlotAllocProto::NrSlSlotAllocProto(const NrSlSlotAllocProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      slrlcpduinfo_(from.slrlcpduinfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sfn()) {
    sfn_ = new ::ns3::SfnSfProto(*from.sfn_);
  } else {
    sfn_ = NULL;
  }
  ::memcpy(&slpsschsubchlength_, &from.slpsschsubchlength_,
    static_cast<size_t>(reinterpret_cast<char*>(&dstl2id_) -
    reinterpret_cast<char*>(&slpsschsubchlength_)) + sizeof(dstl2id_));
  // @@protoc_insertion_point(copy_constructor:ns3.NrSlSlotAllocProto)
}

void NrSlSlotAllocProto::SharedCtor() {
  ::memset(&sfn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dstl2id_) -
      reinterpret_cast<char*>(&sfn_)) + sizeof(dstl2id_));
}

NrSlSlotAllocProto::~NrSlSlotAllocProto() {
  // @@protoc_insertion_point(destructor:ns3.NrSlSlotAllocProto)
  SharedDtor();
}

void NrSlSlotAllocProto::SharedDtor() {
  if (this != internal_default_instance()) delete sfn_;
}

void NrSlSlotAllocProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NrSlSlotAllocProto::descriptor() {
  ::protobuf_sl_2dslot_2dalloc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sl_2dslot_2dalloc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NrSlSlotAllocProto& NrSlSlotAllocProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sl_2dslot_2dalloc_2eproto::scc_info_NrSlSlotAllocProto.base);
  return *internal_default_instance();
}


void NrSlSlotAllocProto::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3.NrSlSlotAllocProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slrlcpduinfo_.Clear();
  if (GetArenaNoVirtual() == NULL && sfn_ != NULL) {
    delete sfn_;
  }
  sfn_ = NULL;
  ::memset(&slpsschsubchlength_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dstl2id_) -
      reinterpret_cast<char*>(&slpsschsubchlength_)) + sizeof(dstl2id_));
  _internal_metadata_.Clear();
}

bool NrSlSlotAllocProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ns3.NrSlSlotAllocProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 slPsschSubChLength = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slpsschsubchlength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 maxNumPerReserve = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxnumperreserve_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool txSci1A = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &txsci1a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 slotNumInd = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slotnumind_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 slPsschSubChStart = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slpsschsubchstart_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 slPsschSymLength = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slpsschsymlength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 slPsschSymStart = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slpsschsymstart_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 slPscchSymLength = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slpscchsymlength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 slPscchSymStart = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slpscchsymstart_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 numSlPscchRbs = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numslpscchrbs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mcs = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 priority = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 rv = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ndi = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ndi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dstL2Id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dstl2id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ns3.SfnSfProto sfn = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sfn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ns3.SlRlcPduInfoProto slRlcPduInfo = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_slrlcpduinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ns3.NrSlSlotAllocProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ns3.NrSlSlotAllocProto)
  return false;
#undef DO_
}

void NrSlSlotAllocProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ns3.NrSlSlotAllocProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 slPsschSubChLength = 1;
  if (this->slpsschsubchlength() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slpsschsubchlength(), output);
  }

  // uint32 maxNumPerReserve = 2;
  if (this->maxnumperreserve() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->maxnumperreserve(), output);
  }

  // bool txSci1A = 3;
  if (this->txsci1a() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->txsci1a(), output);
  }

  // uint32 slotNumInd = 4;
  if (this->slotnumind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->slotnumind(), output);
  }

  // uint32 slPsschSubChStart = 5;
  if (this->slpsschsubchstart() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->slpsschsubchstart(), output);
  }

  // uint32 slPsschSymLength = 6;
  if (this->slpsschsymlength() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->slpsschsymlength(), output);
  }

  // uint32 slPsschSymStart = 7;
  if (this->slpsschsymstart() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->slpsschsymstart(), output);
  }

  // uint32 slPscchSymLength = 8;
  if (this->slpscchsymlength() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->slpscchsymlength(), output);
  }

  // uint32 slPscchSymStart = 9;
  if (this->slpscchsymstart() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->slpscchsymstart(), output);
  }

  // uint32 numSlPscchRbs = 10;
  if (this->numslpscchrbs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->numslpscchrbs(), output);
  }

  // uint32 mcs = 11;
  if (this->mcs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->mcs(), output);
  }

  // uint32 priority = 12;
  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->priority(), output);
  }

  // uint32 rv = 13;
  if (this->rv() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->rv(), output);
  }

  // uint32 ndi = 14;
  if (this->ndi() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->ndi(), output);
  }

  // uint32 dstL2Id = 15;
  if (this->dstl2id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->dstl2id(), output);
  }

  // .ns3.SfnSfProto sfn = 16;
  if (this->has_sfn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->_internal_sfn(), output);
  }

  // repeated .ns3.SlRlcPduInfoProto slRlcPduInfo = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->slrlcpduinfo_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17,
      this->slrlcpduinfo(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ns3.NrSlSlotAllocProto)
}

::google::protobuf::uint8* NrSlSlotAllocProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ns3.NrSlSlotAllocProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 slPsschSubChLength = 1;
  if (this->slpsschsubchlength() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slpsschsubchlength(), target);
  }

  // uint32 maxNumPerReserve = 2;
  if (this->maxnumperreserve() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->maxnumperreserve(), target);
  }

  // bool txSci1A = 3;
  if (this->txsci1a() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->txsci1a(), target);
  }

  // uint32 slotNumInd = 4;
  if (this->slotnumind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->slotnumind(), target);
  }

  // uint32 slPsschSubChStart = 5;
  if (this->slpsschsubchstart() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->slpsschsubchstart(), target);
  }

  // uint32 slPsschSymLength = 6;
  if (this->slpsschsymlength() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->slpsschsymlength(), target);
  }

  // uint32 slPsschSymStart = 7;
  if (this->slpsschsymstart() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->slpsschsymstart(), target);
  }

  // uint32 slPscchSymLength = 8;
  if (this->slpscchsymlength() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->slpscchsymlength(), target);
  }

  // uint32 slPscchSymStart = 9;
  if (this->slpscchsymstart() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->slpscchsymstart(), target);
  }

  // uint32 numSlPscchRbs = 10;
  if (this->numslpscchrbs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->numslpscchrbs(), target);
  }

  // uint32 mcs = 11;
  if (this->mcs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->mcs(), target);
  }

  // uint32 priority = 12;
  if (this->priority() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->priority(), target);
  }

  // uint32 rv = 13;
  if (this->rv() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->rv(), target);
  }

  // uint32 ndi = 14;
  if (this->ndi() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->ndi(), target);
  }

  // uint32 dstL2Id = 15;
  if (this->dstl2id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->dstl2id(), target);
  }

  // .ns3.SfnSfProto sfn = 16;
  if (this->has_sfn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->_internal_sfn(), deterministic, target);
  }

  // repeated .ns3.SlRlcPduInfoProto slRlcPduInfo = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->slrlcpduinfo_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->slrlcpduinfo(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3.NrSlSlotAllocProto)
  return target;
}

size_t NrSlSlotAllocProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3.NrSlSlotAllocProto)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .ns3.SlRlcPduInfoProto slRlcPduInfo = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->slrlcpduinfo_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->slrlcpduinfo(static_cast<int>(i)));
    }
  }

  // .ns3.SfnSfProto sfn = 16;
  if (this->has_sfn()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sfn_);
  }

  // uint32 slPsschSubChLength = 1;
  if (this->slpsschsubchlength() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slpsschsubchlength());
  }

  // uint32 maxNumPerReserve = 2;
  if (this->maxnumperreserve() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maxnumperreserve());
  }

  // bool txSci1A = 3;
  if (this->txsci1a() != 0) {
    total_size += 1 + 1;
  }

  // uint32 slotNumInd = 4;
  if (this->slotnumind() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slotnumind());
  }

  // uint32 slPsschSubChStart = 5;
  if (this->slpsschsubchstart() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slpsschsubchstart());
  }

  // uint32 slPsschSymLength = 6;
  if (this->slpsschsymlength() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slpsschsymlength());
  }

  // uint32 slPsschSymStart = 7;
  if (this->slpsschsymstart() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slpsschsymstart());
  }

  // uint32 slPscchSymLength = 8;
  if (this->slpscchsymlength() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slpscchsymlength());
  }

  // uint32 slPscchSymStart = 9;
  if (this->slpscchsymstart() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slpscchsymstart());
  }

  // uint32 numSlPscchRbs = 10;
  if (this->numslpscchrbs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numslpscchrbs());
  }

  // uint32 mcs = 11;
  if (this->mcs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mcs());
  }

  // uint32 priority = 12;
  if (this->priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->priority());
  }

  // uint32 rv = 13;
  if (this->rv() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rv());
  }

  // uint32 ndi = 14;
  if (this->ndi() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ndi());
  }

  // uint32 dstL2Id = 15;
  if (this->dstl2id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dstl2id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NrSlSlotAllocProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ns3.NrSlSlotAllocProto)
  GOOGLE_DCHECK_NE(&from, this);
  const NrSlSlotAllocProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NrSlSlotAllocProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ns3.NrSlSlotAllocProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ns3.NrSlSlotAllocProto)
    MergeFrom(*source);
  }
}

void NrSlSlotAllocProto::MergeFrom(const NrSlSlotAllocProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3.NrSlSlotAllocProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  slrlcpduinfo_.MergeFrom(from.slrlcpduinfo_);
  if (from.has_sfn()) {
    mutable_sfn()->::ns3::SfnSfProto::MergeFrom(from.sfn());
  }
  if (from.slpsschsubchlength() != 0) {
    set_slpsschsubchlength(from.slpsschsubchlength());
  }
  if (from.maxnumperreserve() != 0) {
    set_maxnumperreserve(from.maxnumperreserve());
  }
  if (from.txsci1a() != 0) {
    set_txsci1a(from.txsci1a());
  }
  if (from.slotnumind() != 0) {
    set_slotnumind(from.slotnumind());
  }
  if (from.slpsschsubchstart() != 0) {
    set_slpsschsubchstart(from.slpsschsubchstart());
  }
  if (from.slpsschsymlength() != 0) {
    set_slpsschsymlength(from.slpsschsymlength());
  }
  if (from.slpsschsymstart() != 0) {
    set_slpsschsymstart(from.slpsschsymstart());
  }
  if (from.slpscchsymlength() != 0) {
    set_slpscchsymlength(from.slpscchsymlength());
  }
  if (from.slpscchsymstart() != 0) {
    set_slpscchsymstart(from.slpscchsymstart());
  }
  if (from.numslpscchrbs() != 0) {
    set_numslpscchrbs(from.numslpscchrbs());
  }
  if (from.mcs() != 0) {
    set_mcs(from.mcs());
  }
  if (from.priority() != 0) {
    set_priority(from.priority());
  }
  if (from.rv() != 0) {
    set_rv(from.rv());
  }
  if (from.ndi() != 0) {
    set_ndi(from.ndi());
  }
  if (from.dstl2id() != 0) {
    set_dstl2id(from.dstl2id());
  }
}

void NrSlSlotAllocProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ns3.NrSlSlotAllocProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NrSlSlotAllocProto::CopyFrom(const NrSlSlotAllocProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3.NrSlSlotAllocProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NrSlSlotAllocProto::IsInitialized() const {
  return true;
}

void NrSlSlotAllocProto::Swap(NrSlSlotAllocProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NrSlSlotAllocProto::InternalSwap(NrSlSlotAllocProto* other) {
  using std::swap;
  CastToBase(&slrlcpduinfo_)->InternalSwap(CastToBase(&other->slrlcpduinfo_));
  swap(sfn_, other->sfn_);
  swap(slpsschsubchlength_, other->slpsschsubchlength_);
  swap(maxnumperreserve_, other->maxnumperreserve_);
  swap(txsci1a_, other->txsci1a_);
  swap(slotnumind_, other->slotnumind_);
  swap(slpsschsubchstart_, other->slpsschsubchstart_);
  swap(slpsschsymlength_, other->slpsschsymlength_);
  swap(slpsschsymstart_, other->slpsschsymstart_);
  swap(slpscchsymlength_, other->slpscchsymlength_);
  swap(slpscchsymstart_, other->slpscchsymstart_);
  swap(numslpscchrbs_, other->numslpscchrbs_);
  swap(mcs_, other->mcs_);
  swap(priority_, other->priority_);
  swap(rv_, other->rv_);
  swap(ndi_, other->ndi_);
  swap(dstl2id_, other->dstl2id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NrSlSlotAllocProto::GetMetadata() const {
  protobuf_sl_2dslot_2dalloc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sl_2dslot_2dalloc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ns3
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ns3::SlRlcPduInfoProto* Arena::CreateMaybeMessage< ::ns3::SlRlcPduInfoProto >(Arena* arena) {
  return Arena::CreateInternal< ::ns3::SlRlcPduInfoProto >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ns3::NrSlSlotAllocProto* Arena::CreateMaybeMessage< ::ns3::NrSlSlotAllocProto >(Arena* arena) {
  return Arena::CreateInternal< ::ns3::NrSlSlotAllocProto >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
