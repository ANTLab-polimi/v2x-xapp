// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl-sfnsf.proto

#include "sl-sfnsf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace ns3 {
class SfnSfProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SfnSfProto>
      _instance;
} _SfnSfProto_default_instance_;
}  // namespace ns3
namespace protobuf_sl_2dsfnsf_2eproto {
static void InitDefaultsSfnSfProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ns3::_SfnSfProto_default_instance_;
    new (ptr) ::ns3::SfnSfProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ns3::SfnSfProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SfnSfProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSfnSfProto}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_SfnSfProto.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ns3::SfnSfProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ns3::SfnSfProto, m_framenum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ns3::SfnSfProto, m_subframenum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ns3::SfnSfProto, m_slotnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ns3::SfnSfProto, m_numerology_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ns3::SfnSfProto)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ns3::_SfnSfProto_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "sl-sfnsf.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016sl-sfnsf.proto\022\003ns3\"`\n\nSfnSfProto\022\022\n\nm"
      "_frameNum\030\001 \001(\r\022\025\n\rm_subframeNum\030\002 \001(\r\022\021"
      "\n\tm_slotNum\030\003 \001(\r\022\024\n\014m_numerology\030\004 \001(\005b"
      "\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 127);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sl-sfnsf.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_sl_2dsfnsf_2eproto
namespace ns3 {

// ===================================================================

void SfnSfProto::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SfnSfProto::kMFrameNumFieldNumber;
const int SfnSfProto::kMSubframeNumFieldNumber;
const int SfnSfProto::kMSlotNumFieldNumber;
const int SfnSfProto::kMNumerologyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SfnSfProto::SfnSfProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sl_2dsfnsf_2eproto::scc_info_SfnSfProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ns3.SfnSfProto)
}
SfnSfProto::SfnSfProto(const SfnSfProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&m_framenum_, &from.m_framenum_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_numerology_) -
    reinterpret_cast<char*>(&m_framenum_)) + sizeof(m_numerology_));
  // @@protoc_insertion_point(copy_constructor:ns3.SfnSfProto)
}

void SfnSfProto::SharedCtor() {
  ::memset(&m_framenum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_numerology_) -
      reinterpret_cast<char*>(&m_framenum_)) + sizeof(m_numerology_));
}

SfnSfProto::~SfnSfProto() {
  // @@protoc_insertion_point(destructor:ns3.SfnSfProto)
  SharedDtor();
}

void SfnSfProto::SharedDtor() {
}

void SfnSfProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SfnSfProto::descriptor() {
  ::protobuf_sl_2dsfnsf_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sl_2dsfnsf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SfnSfProto& SfnSfProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sl_2dsfnsf_2eproto::scc_info_SfnSfProto.base);
  return *internal_default_instance();
}


void SfnSfProto::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3.SfnSfProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&m_framenum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_numerology_) -
      reinterpret_cast<char*>(&m_framenum_)) + sizeof(m_numerology_));
  _internal_metadata_.Clear();
}

bool SfnSfProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ns3.SfnSfProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 m_frameNum = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_framenum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 m_subframeNum = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_subframenum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 m_slotNum = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_slotnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 m_numerology = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_numerology_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ns3.SfnSfProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ns3.SfnSfProto)
  return false;
#undef DO_
}

void SfnSfProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ns3.SfnSfProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 m_frameNum = 1;
  if (this->m_framenum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->m_framenum(), output);
  }

  // uint32 m_subframeNum = 2;
  if (this->m_subframenum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->m_subframenum(), output);
  }

  // uint32 m_slotNum = 3;
  if (this->m_slotnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->m_slotnum(), output);
  }

  // int32 m_numerology = 4;
  if (this->m_numerology() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_numerology(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ns3.SfnSfProto)
}

::google::protobuf::uint8* SfnSfProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ns3.SfnSfProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 m_frameNum = 1;
  if (this->m_framenum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->m_framenum(), target);
  }

  // uint32 m_subframeNum = 2;
  if (this->m_subframenum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->m_subframenum(), target);
  }

  // uint32 m_slotNum = 3;
  if (this->m_slotnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->m_slotnum(), target);
  }

  // int32 m_numerology = 4;
  if (this->m_numerology() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_numerology(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3.SfnSfProto)
  return target;
}

size_t SfnSfProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3.SfnSfProto)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 m_frameNum = 1;
  if (this->m_framenum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->m_framenum());
  }

  // uint32 m_subframeNum = 2;
  if (this->m_subframenum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->m_subframenum());
  }

  // uint32 m_slotNum = 3;
  if (this->m_slotnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->m_slotnum());
  }

  // int32 m_numerology = 4;
  if (this->m_numerology() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->m_numerology());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SfnSfProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ns3.SfnSfProto)
  GOOGLE_DCHECK_NE(&from, this);
  const SfnSfProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SfnSfProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ns3.SfnSfProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ns3.SfnSfProto)
    MergeFrom(*source);
  }
}

void SfnSfProto::MergeFrom(const SfnSfProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3.SfnSfProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.m_framenum() != 0) {
    set_m_framenum(from.m_framenum());
  }
  if (from.m_subframenum() != 0) {
    set_m_subframenum(from.m_subframenum());
  }
  if (from.m_slotnum() != 0) {
    set_m_slotnum(from.m_slotnum());
  }
  if (from.m_numerology() != 0) {
    set_m_numerology(from.m_numerology());
  }
}

void SfnSfProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ns3.SfnSfProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SfnSfProto::CopyFrom(const SfnSfProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3.SfnSfProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SfnSfProto::IsInitialized() const {
  return true;
}

void SfnSfProto::Swap(SfnSfProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SfnSfProto::InternalSwap(SfnSfProto* other) {
  using std::swap;
  swap(m_framenum_, other->m_framenum_);
  swap(m_subframenum_, other->m_subframenum_);
  swap(m_slotnum_, other->m_slotnum_);
  swap(m_numerology_, other->m_numerology_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SfnSfProto::GetMetadata() const {
  protobuf_sl_2dsfnsf_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sl_2dsfnsf_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ns3
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ns3::SfnSfProto* Arena::CreateMaybeMessage< ::ns3::SfnSfProto >(Arena* arena) {
  return Arena::CreateInternal< ::ns3::SfnSfProto >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
